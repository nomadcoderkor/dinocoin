package wallet

const (
	signature     string = "a5778dd54ba5310efce3e55bf8550bc5ddb3e749c6c2fb4957ba53648a665031ef01510979b752b1685169ac56befa6088096788792f3ba0ad908280f773bf8a"
	privateKey    string = "307702010104206f1bab87c908adeabe19fca8e61be1df22da25aad79722c929b7ecc1aae4ecaea00a06082a8648ce3d030107a14403420004e31f8e59ccc17dcf506acd325a100f41830e5c049b2ec497e3cd53907c5eb5177accd32a7c08812496218ce5fde34cc1e4c470044457bcf5f150107bb5c87302"
	hashedMessage string = "2f79f68e55c9115bbfda813980b36907bb301ccdce77f65e4a84d608f63fb68a"
)

// Start .
func Start() {
	// privateKey, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	// keyAsBytes, err := x509.MarshalECPrivateKey(privateKey)
	// fmt.Printf("%x\n\n\n", keyAsBytes)
	// utils.HandleErr(err)
	// fmt.Println("PrivateKey :: ", privateKey.D)
	// fmt.Println("PublicKey X, Y :: ", privateKey.X, privateKey.Y)

	// message := "I Love Blockchain"
	// hashedMessage := utils.Hash(message)
	// fmt.Println(hashedMessage)
	// hashByte, err := hex.DecodeString(hashedMessage)
	// utils.HandleErr(err)
	// r, s, err := ecdsa.Sign(rand.Reader, privateKey, hashByte)

	// signature := append(r.Bytes(), s.Bytes()...)

	// fmt.Printf("%x\n", signature)
	// utils.HandleErr(err)

}
